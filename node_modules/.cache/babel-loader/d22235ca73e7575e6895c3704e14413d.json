{"ast":null,"code":"var _jsxFileName = \"/Users/Justin/coursework/info490-491/apps-lokisloop-euphorigen/src/admin/components/InputStats.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Grid, Typography, FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport * as d3 from \"d3\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styles from \"@/admin/style/inputStatsStyle.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputStats = props => {\n  _s();\n\n  const useStyles = makeStyles(styles);\n  const classes = useStyles();\n  const [boxIndex, setBoxIndex] = useState(0);\n  const ref = useRef(); //sets input box to 1 when puzzle changes\n\n  useEffect(() => {\n    setBoxIndex(0);\n  }, [props.puzzleId]);\n\n  const generateTreemap = (data, ref) => {\n    d3.select(ref).selectAll(\"*\").remove();\n    data.forEach(function (element) {\n      element.color = \"#d6ecfb\";\n    }); //replace above with Math.floor(Math.random()*16777215).toString(16) for random\n\n    data = {\n      children: data\n    }; //doesn't actually dynamically set h/w atm, defaults to 530 x 375\n\n    var svg = d3.select(ref);\n    let width = svg === null ? svg.style(\"width\").replace(\"px\", \"\") : 530;\n    let height = svg === null ? svg.style(\"height\").replace(\"px\", \"\") : 375;\n    const treeMapLayout = d3.treemap().size([width, height]).padding(4);\n    const root = d3.hierarchy(data);\n    root.sum(d => d.count);\n    treeMapLayout(root);\n    var nodes = d3.select(ref).selectAll('g').data(root.descendants()).enter().append('g').attr('transform', d => 'translate(' + [d.x0, d.y0] + ')').attr('fill', d => d.data.color);\n    nodes.append('rect').attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).style(\"stroke\", d => {\n      return d.height === 1 ? null : \"black\";\n    });\n    nodes.append('text').attr('dx', 4).attr('dy', 14).attr('fill', 'black').text(d => d.data.input);\n  };\n\n  if (props.inputData !== \"\") {\n    let groupInput = [...Array(9)].map(e => []);\n    props.inputData.forEach(metric => {\n      groupInput[Number(metric.info.charAt(0)) - 1].push(metric.info.substring(1, metric.info.length));\n    }); //removes empty array elemens so that there is only the a number equal to the number of input boxes\n\n    while (groupInput.length !== 0 && groupInput[groupInput.length - 1].length === 0) {\n      groupInput.pop();\n    }\n\n    let freqs = groupInput.map(inputBox => {\n      return inputBox.reduce((r, c) => (r[c] = (r[c] || 0) + 1, r), {});\n    });\n    freqs = freqs.map(freq => {\n      return Object.keys(freq).map(k => {\n        return {\n          input: k,\n          count: freq[k]\n        };\n      }).sort((a, b) => b.count - a.count);\n    }); //makes sure boxIndex is not > # of boxes after changing puzzle\n\n    let displayBI = boxIndex;\n\n    if (boxIndex >= freqs.length) {\n      displayBI = 0;\n    }\n\n    if (freqs.length > 0) {\n      setTimeout(() => {\n        generateTreemap(freqs[displayBI], ref.current);\n      }, 0);\n    } else {\n      d3.select(ref.current).selectAll(\"*\").remove();\n    }\n\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.component,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          className: classes.title,\n          children: \"Input Box Stats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        align: \"center\",\n        className: classes.selectContainer,\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          variant: \"outlined\",\n          className: classes.formControl,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"demo-simple-select-outlined-label\",\n            children: \"Input Box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: displayBI,\n            onChange: e => setBoxIndex(e.target.value),\n            label: \"Input Box\",\n            children: freqs.map((_, index) => {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: index,\n                children: index + 1\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 33\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        className: classes.gridItem,\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: classes.svg,\n          id: \"inputSvg\",\n          ref: ref,\n          style: {\n            fill: \"white\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"passwordTreeMap\",\n            style: {\n              fill: \"white\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        className: classes.gridItem,\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          className: classes.table,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            \"aria-label\": \"simple table\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Input Box Id\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Content\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Count\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: freqs.length > 0 ? freqs[displayBI].map(item => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: displayBI + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  component: \"th\",\n                  scope: \"row\",\n                  align: \"right\",\n                  children: item.input\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: item.count\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 33\n                }, this)]\n              }, item.input, true, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 33\n              }, this)) : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(InputStats, \"SdwhcdK01yOxeHAPZsIFy1dLeWk=\", true);\n\n_c = InputStats;\nexport default InputStats;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputStats\");","map":{"version":3,"sources":["/Users/Justin/coursework/info490-491/apps-lokisloop-euphorigen/src/admin/components/InputStats.js"],"names":["React","useState","useRef","useEffect","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Grid","Typography","FormControl","InputLabel","MenuItem","Select","d3","makeStyles","styles","InputStats","props","useStyles","classes","boxIndex","setBoxIndex","ref","puzzleId","generateTreemap","data","select","selectAll","remove","forEach","element","color","children","svg","width","style","replace","height","treeMapLayout","treemap","size","padding","root","hierarchy","sum","d","count","nodes","descendants","enter","append","attr","x0","y0","x1","y1","text","input","inputData","groupInput","Array","map","e","metric","Number","info","charAt","push","substring","length","pop","freqs","inputBox","reduce","r","c","freq","Object","keys","k","sort","a","b","displayBI","setTimeout","current","component","title","selectContainer","formControl","target","value","_","index","gridItem","fill","table","item"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Grid, Typography, FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\"\n\nimport * as d3 from \"d3\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styles from \"@/admin/style/inputStatsStyle.js\";\n\nconst InputStats = (props) => {\n    const useStyles = makeStyles(styles);\n    const classes = useStyles();\n\n    const [boxIndex, setBoxIndex] = useState(0)\n\n    const ref = useRef()\n\n    //sets input box to 1 when puzzle changes\n    useEffect(()=>{\n        setBoxIndex(0)\n    },[props.puzzleId])\n\n    const generateTreemap = (data, ref) => {\n        d3.select(ref).selectAll(\"*\").remove();\n\n        data.forEach(function (element) {\n            element.color = \"#d6ecfb\";\n        });\n        //replace above with Math.floor(Math.random()*16777215).toString(16) for random\n        data = {children: data}\n\n        //doesn't actually dynamically set h/w atm, defaults to 530 x 375\n        var svg = d3.select(ref)\n        let width = svg === null ? svg.style(\"width\").replace(\"px\",\"\") : 530\n        let height = svg === null ? svg.style(\"height\").replace(\"px\",\"\") : 375\n\n        const treeMapLayout = d3.treemap().size([width,height]).padding(4);\n        const root = d3.hierarchy(data);\n\n        root.sum(d => d.count);\n        treeMapLayout(root);\n\n       var nodes = d3.select(ref)\n        .selectAll('g')\n        .data(root.descendants())\n        .enter()\n        .append('g')\n        .attr('transform', d => 'translate(' + [d.x0, d.y0] + ')')\n        .attr('fill', d => d.data.color)\n\n        nodes\n            .append('rect')\n            .attr('width', d => d.x1 - d.x0)\n            .attr('height', d => d.y1 - d.y0)\n            .style(\"stroke\", d => {\n                return d.height === 1 ? null : \"black\"\n            })\n\n        nodes\n            .append('text')\n            .attr('dx', 4)\n            .attr('dy', 14)\n            .attr('fill','black')\n            .text(d => d.data.input)\n    };\n\n    if(props.inputData !== \"\") {\n        let groupInput = [...Array(9)].map(e => []);\n\n        props.inputData.forEach((metric)=>{\n            groupInput[Number(metric.info.charAt(0)) - 1].push(metric.info.substring(1,metric.info.length))\n        })\n\n        //removes empty array elemens so that there is only the a number equal to the number of input boxes\n        while(groupInput.length !== 0 && groupInput[groupInput.length - 1].length === 0) {\n            groupInput.pop()\n        }\n\n        let freqs = groupInput.map((inputBox)=>{\n            return inputBox.reduce((r,c) => ((r[c] = (r[c] || 0) + 1, r)), {})\n        })\n\n        freqs = freqs.map((freq)=>{\n            return Object.keys(freq).map(k => {\n                return {input: k, count: freq[k]}; }).sort((a, b) =>\n                    b.count - a.count\n                );\n        })\n\n        //makes sure boxIndex is not > # of boxes after changing puzzle\n        let displayBI = boxIndex\n        if(boxIndex >= freqs.length) {\n            displayBI = 0\n        }\n\n        if(freqs.length > 0 ) {\n            setTimeout(()=>{\n                generateTreemap(freqs[displayBI], ref.current)\n            },0)\n        } else {\n            d3.select(ref.current).selectAll(\"*\").remove();\n        }\n\n        return (\n            <Grid container className={classes.component}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h5\" className={classes.title}>Input Box Stats</Typography>\n                </Grid>\n                <Grid item xs={12} align=\"center\" className={classes.selectContainer}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-outlined-label\">Input Box</InputLabel>\n                        <Select\n                        value={displayBI}\n                        onChange={(e)=>setBoxIndex(e.target.value)}\n                        label=\"Input Box\"\n                        >\n                        {freqs.map((_,index)=>{\n                            return (\n                                <MenuItem key={index} value={index}>{index+1}</MenuItem>\n                            )\n                        })}\n                        </Select>\n                    </FormControl>\n                </Grid>\n\n                <Grid item xs={6} className={classes.gridItem}>\n                    <svg className={classes.svg} id = \"inputSvg\" ref = {ref} style={{fill:\"white\"}}>\n                            <g id=\"passwordTreeMap\" style={{fill:\"white\"}}></g>\n                    </svg>\n                </Grid>\n                <Grid item xs={6} className={classes.gridItem}>\n                    <TableContainer component={Paper} className={classes.table}>\n                        <Table aria-label=\"simple table\">\n                            <TableHead>\n                            <TableRow>\n                                <TableCell>Input Box Id</TableCell>\n                                <TableCell align=\"right\">Content</TableCell>\n                                <TableCell align=\"right\">Count</TableCell>\n                            </TableRow>\n                            </TableHead>\n                            <TableBody>\n                            {freqs.length > 0 ? freqs[displayBI].map((item) => (\n                                <TableRow key={item.input}>\n                                <TableCell>{displayBI + 1}</TableCell>\n                                <TableCell component=\"th\" scope=\"row\" align=\"right\">\n                                    {item.input}\n                                </TableCell>\n                                <TableCell align=\"right\">{item.count}</TableCell>\n                                </TableRow>\n                            )) : null}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Grid>\n            </Grid>\n        )\n    } else {\n        return (\n            <div>loading</div>\n        )\n    }\n}\n\nexport default InputStats;"]},"metadata":{},"sourceType":"module"}