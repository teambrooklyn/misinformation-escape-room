{"ast":null,"code":"var _jsxFileName = \"/Users/Justin/coursework/info490-491/apps-lokisloop-euphorigen/src/shared/pages/Puzzle.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, lazy, useEffect, Suspense } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Redirect } from \"react-router-dom\";\nimport { mapping, GetCookie, logMetric, setWithExpiry, getWithExpiry } from '@/shared/UtilityFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Puzzle = () => {\n  _s();\n\n  const [validRoute, setRoute] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {\n    puzzleId\n  } = useParams();\n  const level = parseInt(getWithExpiry(\"level\"));\n  const id = mapping.get(puzzleId);\n  const Component = /*#__PURE__*/lazy(() => import(`@/shared/puzzles/puzzle${id}/Puzzle${id}`));\n  useEffect(() => {\n    if (mapping.has(puzzleId) && parseInt(id) === level) {\n      if (getWithExpiry(\"p\" + id + \"start\") === null && GetCookie(\"trackable\") === \"true\") {\n        logMetric(mapping.get(puzzleId), \"TimeEvent\", \"start\");\n        setWithExpiry(\"p\" + id + \"start\", true, 3600000);\n      }\n\n      setRoute(true);\n    }\n\n    setLoading(false);\n  }, [id, level, puzzleId]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading Puzzle ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  } else if (validRoute) {\n    return /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading Puzzle...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Component, {\n        style: {\n          position: \"absolute\",\n          left: 0,\n          top: 0\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/puzzles'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Puzzle, \"TVCDrfU4SPILv/Fv6l0nwdT4Sm4=\", false, function () {\n  return [useParams];\n});\n\n_c = Puzzle;\nexport default Puzzle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Puzzle\");","map":{"version":3,"sources":["/Users/Justin/coursework/info490-491/apps-lokisloop-euphorigen/src/shared/pages/Puzzle.js"],"names":["React","useState","lazy","useEffect","Suspense","useParams","Redirect","mapping","GetCookie","logMetric","setWithExpiry","getWithExpiry","Puzzle","validRoute","setRoute","loading","setLoading","puzzleId","level","parseInt","id","get","Component","has","position","left","top","pathname"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,SAA7B,EAAwCC,aAAxC,EAAuDC,aAAvD,QAA4E,2BAA5E;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBb,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAM;AAAEgB,IAAAA;AAAF,MAAeZ,SAAS,EAA9B;AACD,QAAMa,KAAK,GAAGC,QAAQ,CAACR,aAAa,CAAC,OAAD,CAAd,CAAtB;AACC,QAAMS,EAAE,GAAGb,OAAO,CAACc,GAAR,CAAYJ,QAAZ,CAAX;AAEA,QAAMK,SAAS,gBAAGpB,IAAI,CAAC,MAAM,OAAQ,0BAAyBkB,EAAG,UAASA,EAAG,EAAhD,CAAP,CAAtB;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGI,OAAO,CAACgB,GAAR,CAAYN,QAAZ,KAAyBE,QAAQ,CAACC,EAAD,CAAR,KAAiBF,KAA7C,EAAoD;AAClD,UAAGP,aAAa,CAAC,MAAKS,EAAL,GAAS,OAAV,CAAb,KAAoC,IAApC,IAA4CZ,SAAS,CAAC,WAAD,CAAT,KAA2B,MAA1E,EAAkF;AAChFC,QAAAA,SAAS,CAACF,OAAO,CAACc,GAAR,CAAYJ,QAAZ,CAAD,EAAwB,WAAxB,EAAqC,OAArC,CAAT;AACAP,QAAAA,aAAa,CAAC,MAAKU,EAAL,GAAS,OAAV,EAAkB,IAAlB,EAAuB,OAAvB,CAAb;AACD;;AACDN,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDE,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GATQ,EASP,CAACI,EAAD,EAAKF,KAAL,EAAYD,QAAZ,CATO,CAAT;;AAWA,MAAGF,OAAH,EAAY;AACV,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GAJD,MAIO,IAAIF,UAAJ,EAAgB;AACrB,wBACE,QAAC,QAAD;AAAU,MAAA,QAAQ,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAApB;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAAEW,UAAAA,QAAQ,EAAE,UAAZ;AAAwBC,UAAAA,IAAI,EAAE,CAA9B;AAAiCC,UAAAA,GAAG,EAAE;AAAtC;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GANM,MAMA;AACL,wBACE,QAAC,QAAD;AACE,MAAA,EAAE,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR;AADN;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;AACF,CAxCD;;GAAMf,M;UAIiBP,S;;;KAJjBO,M;AA0CN,eAAeA,MAAf","sourcesContent":["import React, { useState, lazy, useEffect, Suspense } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Redirect } from \"react-router-dom\";\nimport { mapping, GetCookie, logMetric, setWithExpiry, getWithExpiry } from '@/shared/UtilityFunctions'\n\nconst Puzzle = () => {\n  const [validRoute, setRoute] = useState(false)\n  const [loading, setLoading] = useState(true)\n\n  const { puzzleId } = useParams();\n\tconst level = parseInt(getWithExpiry(\"level\"))\n  const id = mapping.get(puzzleId)\n\n  const Component = lazy(() => import(`@/shared/puzzles/puzzle${id}/Puzzle${id}`));\n\n  useEffect(() => {\n    if(mapping.has(puzzleId) && parseInt(id) === level) {\n      if(getWithExpiry(\"p\"+ id +\"start\") === null && GetCookie(\"trackable\") === \"true\") {\n        logMetric(mapping.get(puzzleId), \"TimeEvent\", \"start\")\n        setWithExpiry(\"p\"+ id +\"start\",true,3600000)\n      }\n      setRoute(true)\n    }\n    setLoading(false)\n  },[id, level, puzzleId]);\n\n  if(loading) {\n    return (\n      <h1>Loading Puzzle ...</h1>\n    )\n  } else if (validRoute) {\n    return (\n      <Suspense fallback={<h1>Loading Puzzle...</h1>}>\n        <Component style={{ position: \"absolute\", left: 0, top: 0 }} />\n      </Suspense>\n    )\n  } else {\n    return (\n      <Redirect\n        to={{\n          pathname: '/puzzles'\n        }}\n      />\n    )\n  }\n}\n\nexport default Puzzle;\n"]},"metadata":{},"sourceType":"module"}