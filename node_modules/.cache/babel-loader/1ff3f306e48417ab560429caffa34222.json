{"ast":null,"code":"var _jsxFileName = \"/Users/Justin/coursework/info490-491/apps-lokisloop-euphorigen/src/admin/components/PasswordStats.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Grid, Typography } from \"@material-ui/core\";\nimport * as d3 from \"d3\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styles from \"@/admin/style/passwordStatsStyle.js\";\nimport Histogram from \"@/admin/components/Histogram\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PuzzleStats = props => {\n  _s();\n\n  const useStyles = makeStyles(styles);\n  const classes = useStyles();\n  const ref = useRef();\n\n  const generateTreemap = (data, ref) => {\n    d3.select(ref).selectAll(\"*\").remove();\n    data.forEach(function (element) {\n      element.color = \"#d6ecfb\";\n    }); //replace above with Math.floor(Math.random()*16777215).toString(16) for random\n\n    data = {\n      children: data\n    }; //doesn't actually dynamically set h/w atm, defaults to 530 x 375\n\n    var svg = d3.select(ref); // console.log(svg)\n\n    let width = svg === null ? svg.style(\"width\").replace(\"px\", \"\") : 530;\n    let height = svg === null ? svg.style(\"height\").replace(\"px\", \"\") : 375;\n    const treeMapLayout = d3.treemap().size([width, height]).padding(4);\n    const root = d3.hierarchy(data);\n    root.sum(d => d.count);\n    treeMapLayout(root); //#passwordTreeMap\n\n    var nodes = d3.select(ref).selectAll('g').data(root.descendants()).enter().append('g').attr('transform', d => 'translate(' + [d.x0, d.y0] + ')').attr('fill', d => d.data.color);\n    nodes.append('rect').attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).style(\"stroke\", d => {\n      return d.height === 1 ? null : \"black\";\n    });\n    nodes.append('text').attr('dx', 4).attr('dy', 14).attr('fill', 'black').text(d => d.data.word);\n  };\n\n  if (props.passwordData) {\n    //https://stackoverflow.com/questions/44387647/group-and-count-values-in-an-array/44387859\n    var counts = props.passwordData.reduce((p, c) => {\n      var playerid = c.playerid;\n\n      if (!p.hasOwnProperty(playerid)) {\n        p[playerid] = 0;\n      }\n\n      p[playerid]++;\n      return p;\n    }, {});\n    var countsExtended = Object.keys(counts).map(k => {\n      return {\n        name: k,\n        count: counts[k]\n      };\n    });\n    let labels = [\"1\", \"2-3\", \"4-6\", \"7-10\", \"10+\"];\n    let histogramData = new Array(5).fill(0);\n    countsExtended.forEach(_ref => {\n      let {\n        count\n      } = _ref;\n\n      if (count === 1) {\n        histogramData[0]++;\n      } else if (count <= 3) {\n        histogramData[1]++;\n      } else if (count <= 6) {\n        histogramData[2]++;\n      } else if (count <= 10) {\n        histogramData[3]++;\n      } else {\n        histogramData[4]++;\n      }\n    });\n    var wordCounts = props.passwordData.reduce((p, c) => {\n      var info = c.info;\n\n      if (!p.hasOwnProperty(info)) {\n        p[info] = 0;\n      }\n\n      p[info]++;\n      return p;\n    }, {});\n    var wordCountsArray = Object.keys(wordCounts).map(k => {\n      return {\n        word: k,\n        count: wordCounts[k]\n      };\n    });\n    wordCountsArray.sort(function (a, b) {\n      return b.count - a.count;\n    });\n    setTimeout(() => {\n      generateTreemap(wordCountsArray, ref.current);\n    }, 0);\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      className: classes.component,\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          className: classes.title,\n          children: \"Incorrect Password Stats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.gridItem,\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Histogram, {\n          data: histogramData,\n          labels: labels,\n          unit: \"Num incorrect passwords\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        className: classes.gridItem,\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          className: classes.table,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            \"aria-label\": \"simple table\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Incorrect Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Count\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: wordCountsArray.map(item => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  component: \"th\",\n                  scope: \"row\",\n                  children: item.word\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: item.count\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 37\n                }, this)]\n              }, item.word, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        className: classes.gridItem,\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: classes.svg,\n          id: \"passwordSvg\",\n          ref: ref,\n          style: {\n            fill: \"white\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"passwordTreeMap\",\n            style: {\n              fill: \"white\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(PuzzleStats, \"WMU7RuDLxZBNduty3HUzeUCdsrc=\", true);\n\n_c = PuzzleStats;\nexport default PuzzleStats;\n\nvar _c;\n\n$RefreshReg$(_c, \"PuzzleStats\");","map":{"version":3,"sources":["/Users/Justin/coursework/info490-491/apps-lokisloop-euphorigen/src/admin/components/PasswordStats.js"],"names":["React","useRef","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Grid","Typography","d3","makeStyles","styles","Histogram","PuzzleStats","props","useStyles","classes","ref","generateTreemap","data","select","selectAll","remove","forEach","element","color","children","svg","width","style","replace","height","treeMapLayout","treemap","size","padding","root","hierarchy","sum","d","count","nodes","descendants","enter","append","attr","x0","y0","x1","y1","text","word","passwordData","counts","reduce","p","c","playerid","hasOwnProperty","countsExtended","Object","keys","map","k","name","labels","histogramData","Array","fill","wordCounts","info","wordCountsArray","sort","a","b","setTimeout","current","component","title","gridItem","table","item"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Grid, Typography } from \"@material-ui/core\"\n\nimport * as d3 from \"d3\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styles from \"@/admin/style/passwordStatsStyle.js\";\nimport Histogram from \"@/admin/components/Histogram\";\n\nconst PuzzleStats = (props) => {\n    const useStyles = makeStyles(styles);\n    const classes = useStyles();\n\n    const ref = useRef()\n\n    const generateTreemap = (data, ref) => {\n        d3.select(ref).selectAll(\"*\").remove();\n\n        data.forEach(function (element) {\n            element.color = \"#d6ecfb\";\n        });\n        //replace above with Math.floor(Math.random()*16777215).toString(16) for random\n        data = {children: data}\n\n        //doesn't actually dynamically set h/w atm, defaults to 530 x 375\n        var svg = d3.select(ref)\n       // console.log(svg)\n        let width = svg === null ? svg.style(\"width\").replace(\"px\",\"\") : 530\n        let height = svg === null ? svg.style(\"height\").replace(\"px\",\"\") : 375\n\n        const treeMapLayout = d3.treemap().size([width,height]).padding(4);\n        const root = d3.hierarchy(data);\n\n        root.sum(d => d.count);\n        treeMapLayout(root);\n\n        //#passwordTreeMap\n       var nodes = d3.select(ref)\n        .selectAll('g')\n        .data(root.descendants())\n        .enter()\n        .append('g')\n        .attr('transform', d => 'translate(' + [d.x0, d.y0] + ')')\n        .attr('fill', d => d.data.color)\n\n        nodes\n            .append('rect')\n            .attr('width', d => d.x1 - d.x0)\n            .attr('height', d => d.y1 - d.y0)\n            .style(\"stroke\", d => {\n                return d.height === 1 ? null : \"black\"\n            })\n\n        nodes\n            .append('text')\n            .attr('dx', 4)\n            .attr('dy', 14)\n            .attr('fill','black')\n            .text(d => d.data.word)\n    };\n\n    if(props.passwordData) {\n        //https://stackoverflow.com/questions/44387647/group-and-count-values-in-an-array/44387859\n        var counts = props.passwordData.reduce((p, c) => {\n            var playerid = c.playerid;\n            if (!p.hasOwnProperty(playerid)) {\n              p[playerid] = 0;\n            }\n            p[playerid]++;\n            return p;\n          }, {});\n\n        var countsExtended = Object.keys(counts).map(k => {\n            return {name: k, count: counts[k]}; });\n\n        let labels = [\"1\", \"2-3\", \"4-6\", \"7-10\", \"10+\"]\n\n        let histogramData = new Array(5).fill(0);\n        countsExtended.forEach(({count})=>{\n            if(count === 1) {\n                histogramData[0]++\n            } else if (count <= 3) {\n                histogramData[1]++\n            } else if (count <= 6) {\n                histogramData[2]++\n            } else if (count <= 10) {\n                histogramData[3]++\n            } else {\n                histogramData[4]++\n            }\n        })\n\n        var wordCounts = props.passwordData.reduce((p, c) => {\n            var info = c.info;\n            if (!p.hasOwnProperty(info)) {\n              p[info] = 0;\n            }\n            p[info]++;\n            return p;\n          }, {});\n\n        var wordCountsArray = Object.keys(wordCounts).map(k => {\n            return {word: k, count: wordCounts[k]}; });\n\n        wordCountsArray.sort(function(a, b) {\n            return b.count - a.count;\n        });\n\n        setTimeout(()=>{\n            generateTreemap(wordCountsArray, ref.current)\n        },0)\n\n        return (\n            <Grid className={classes.component} container>\n                    <Grid item xs={12}>\n                        <Typography variant=\"h5\" className={classes.title}>Incorrect Password Stats</Typography>\n                    </Grid>\n                    <Grid item xs = {12} className={classes.gridItem} align=\"center\">\n                        <Histogram data={histogramData} labels={labels} unit={\"Num incorrect passwords\"}></Histogram>\n                    </Grid>\n                    <Grid item xs = {6} className={classes.gridItem}>\n                        <TableContainer component={Paper} className={classes.table}>\n                            <Table aria-label=\"simple table\">\n                                <TableHead>\n                                <TableRow>\n                                    <TableCell>Incorrect Password</TableCell>\n                                    <TableCell align=\"right\">Count</TableCell>\n                                </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                {wordCountsArray.map((item) => (\n                                    <TableRow key={item.word}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {item.word}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{item.count}</TableCell>\n                                    </TableRow>\n                                ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                    <Grid item xs={6} className={classes.gridItem}>\n                        <svg className={classes.svg} id = \"passwordSvg\" ref = {ref} style={{fill:\"white\"}}>\n                            <g id=\"passwordTreeMap\" style={{fill:\"white\"}}></g>\n                        </svg>\n                    </Grid>\n            </Grid>\n        )\n    } else {\n        return (\n            <div>loading</div>\n        )\n    }\n\n\n\n}\n\nexport default PuzzleStats;\n"]},"metadata":{},"sourceType":"module"}